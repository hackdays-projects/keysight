# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import servo_pb2 as servo__pb2


class DoorLockStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Unlock = channel.unary_unary(
                '/DoorLock.DoorLock/Unlock',
                request_serializer=servo__pb2.UnlockRequest.SerializeToString,
                response_deserializer=servo__pb2.UnlockResponse.FromString,
                )
        self.Lock = channel.unary_unary(
                '/DoorLock.DoorLock/Lock',
                request_serializer=servo__pb2.LockRequest.SerializeToString,
                response_deserializer=servo__pb2.LockResponse.FromString,
                )


class DoorLockServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Unlock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Lock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DoorLockServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Unlock': grpc.unary_unary_rpc_method_handler(
                    servicer.Unlock,
                    request_deserializer=servo__pb2.UnlockRequest.FromString,
                    response_serializer=servo__pb2.UnlockResponse.SerializeToString,
            ),
            'Lock': grpc.unary_unary_rpc_method_handler(
                    servicer.Lock,
                    request_deserializer=servo__pb2.LockRequest.FromString,
                    response_serializer=servo__pb2.LockResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'DoorLock.DoorLock', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DoorLock(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Unlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DoorLock.DoorLock/Unlock',
            servo__pb2.UnlockRequest.SerializeToString,
            servo__pb2.UnlockResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Lock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DoorLock.DoorLock/Lock',
            servo__pb2.LockRequest.SerializeToString,
            servo__pb2.LockResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
